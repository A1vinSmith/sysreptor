from django.conf import settings
from rest_framework import permissions, authentication

from reportcreator_api.users.models import PentestUser


class IsAuthenticatedOrRetrieve(permissions.IsAuthenticated):
    def has_permission(self, request, view):
        if view.action and view.action.startswith('retrieve'):
          return True
        return super().has_permission(request, view)


class ProjectTypePermissions(permissions.BasePermission):
    public_actions = ['preview']
    private_actions = ['update', 'partial_update', 'destroy', 'lock', 'unlock', 'export']

    def has_permission(self, request, view):
        if request.user.is_superuser or request.user.is_designer:
            return True
        if request.method in permissions.SAFE_METHODS or view.action in self.public_actions + self.private_actions:
            return True
        return False
    
    def has_object_permission(self, request, view, obj):
        if request.user.is_superuser or request.user.is_designer:
            return True
        if obj.linked_project is None:
            return request.method in permissions.SAFE_METHODS or view.action in self.public_actions
        elif obj.linked_project is not None and request.user in set(map(lambda m: m.user, obj.linked_project.members.all())):
            return request.method in permissions.SAFE_METHODS or view.action in self.public_actions + self.private_actions
        return False


class ProjectTypeSubresourcePermissions(permissions.BasePermission):
    def has_permission(self, request, view):
        if request.user.is_superuser or request.user.is_designer:
            return True
        project_type = view.get_project_type()
        if project_type.linked_project is None:
            return request.method in permissions.SAFE_METHODS
        elif project_type.linked_project is not None and request.user in set(map(lambda m: m.user, project_type.linked_project.members.all())):
            return True
        return False
    

class IsTemplateEditorOrReadOnly(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.method in permissions.SAFE_METHODS or request.user.is_superuser or request.user.is_template_editor


class ProjectPermissions(permissions.BasePermission):
    def has_permission(self, request, view):
        if request.user.is_guest:
            if not settings.GUEST_USERS_CAN_CREATE_PROJECTS and view.action in ['create', 'copy', 'import_']:
                return False
            elif not settings.GUEST_USERS_CAN_IMPORT_PROJECTS and view.action in ['import_']:
                return False
            elif not settings.GUEST_USERS_CAN_DELETE_PROJECTS and view.action in ['destroy']:
                return False
            elif not settings.GUEST_USERS_CAN_UPDATE_PROJECT_SETTINGS and view.action in ['update', 'partial_update', 'readonly', 'customize_projecttype']:
                return False

        return True

    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS or view.action in ['check', 'preview', 'generate', 'copy', 'export', 'readonly']:
            return True
        return not obj.readonly


class ProjectSubresourcePermissions(permissions.BasePermission):
    def has_permission(self, request, view):
        if request.method in permissions.SAFE_METHODS:
            return True
        return not view.get_project().readonly

