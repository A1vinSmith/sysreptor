from django.db import models
from reportcreator_api.pentests.customfields.types import FieldDefinition

from reportcreator_api.pentests.customfields.utils import HandleUndefinedFieldsOptions, ensure_defined_structure, merge
from reportcreator_api.pentests.customfields.validators import FieldValuesValidator
from reportcreator_api.utils.utils import copy_keys, omit_keys


class CustomFieldsMixin:
    custom_fields = models.JSONField(default=dict)

    @property
    def field_definition(self) -> dict[str, FieldDefinition]:
        return {}

    @property
    def core_field_names(self) -> list[str]:
        return []

    @property
    def fields(self):
        """
        Return a dict of all field values.
        Sets default values, if a field is not defined.
        Includes data of undefined fields not present in the definition.
        """

        # Build dict of all current values
        # Merge core fields stored directly on the model instance and custom_fields stored as dict
        out = self.custom_fields.copy()
        for k in self.core_field_names:
            out[k] = getattr(self, k)
        
        # recursively check for undefined fields and set default value
        out = ensure_defined_structure(value=out, definition=self.field_definition, handle_undefined=HandleUndefinedFieldsOptions.FILL_NONE)

        return out

    def update_fields(self, value):
        # Merge with previous custom data
        value = merge(self.fields, value)

        # Validate data
        FieldValuesValidator(self.field_definition)(value)

        # Distribute to model fields
        for k, v in copy_keys(value, self.core_field_names).items():
            setattr(self, k, v)
        self.custom_fields = self.custom_fields | omit_keys(value, self.core_field_names)
