import random
import string
from django.db.models import signals
from django.dispatch import receiver
from reportcreator_api.pentests.customfields.predefined_fields import FINDING_FIELDS_CORE, REPORT_FIELDS_CORE
from reportcreator_api.pentests.customfields.types import parse_field_definition
from reportcreator_api.pentests.customfields.utils import HandleUndefinedFieldsOptions, ensure_defined_structure, has_field_structure_changed

from reportcreator_api.pentests.models import FindingTemplate, PentestFinding, PentestProject, PentestReport, ProjectType, ReportSection, UploadedAsset, UploadedImage


@receiver(signals.post_save, sender=PentestProject)
def project_project_type_changed(sender, instance, created, *args, **kwargs):
    """
    When the project_type of a project changed, update the structure of all fields
    """
    if created or 'project_type' in instance.changed_fields:
        # Convert report data
        instance.report.update_fields(ensure_defined_structure(
            value=instance.report.fields, 
            definition=instance.project_type.report_fields_obj, 
            handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        if instance.report.has_changed:
            instance.report.save()

        # Create/delete report sections
        existing_sections = {s.section_id for s in instance.report.sections.all()}
        all_sections = {s.get('id') for s in instance.project_type.report_sections}
        if new_sections := all_sections - existing_sections:
            ReportSection.objects.bulk_create([ReportSection(report=instance.report, section_id=s) for s in new_sections])
        if removed_sections := existing_sections - all_sections:
            ReportSection.objects \
                .filter(report=instance.report) \
                .filter(section_id__in=removed_sections) \
                .delete()

        # Update finding fields
        updated_findings = list(instance.report.findings.all().select_related('report__project__project_type'))
        for finding in updated_findings:
            finding.update_fields(ensure_defined_structure(
                value=finding.fields, 
                definition=instance.project_type.finding_fields_obj, 
                handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        PentestFinding.objects.bulk_update(
            filter(lambda f: f.has_changed, updated_findings), 
            fields=['custom_fields'] + list(FINDING_FIELDS_CORE.keys()))




@receiver(signals.post_save, sender=ProjectType)
def project_type_field_definition_changed(sender, instance, *args, **kwargs):
    """
    When report_fields or finding_fields structure changed, update the field structure of all projects that are based on this project_type
    """

    if (diff := instance.get_field_diff('report_fields')) and has_field_structure_changed(parse_field_definition(diff[0]), instance.report_fields_obj):
        # Update structure of all reports using that project_type
        updated_reports = list(PentestReport.objects.filter(project__project_type=instance).select_related('project__project_type'))
        for report in updated_reports:
            report.update_fields(ensure_defined_structure(
                value=report.fields, 
                definition=instance.report_fields_obj, 
                handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        PentestReport.objects.bulk_update(updated_reports, fields=['custom_fields'] + list(REPORT_FIELDS_CORE.keys()))

    if (diff := instance.get_field_diff('finding_fields')) and has_field_structure_changed(parse_field_definition(diff[0]), instance.finding_fields_obj):
        # Update structure of all findings of this project_type
        updated_findings = list(PentestFinding.objects.filter(report__project__project_type=instance).select_related('report__project__project_type'))
        for finding in updated_findings:
            finding.update_fields(ensure_defined_structure(
                value=finding.fields, 
                definition=instance.finding_fields_obj, 
                handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        PentestFinding.objects.bulk_update(updated_findings, fields=['custom_fields'] + list(FINDING_FIELDS_CORE.keys()))


@receiver(signals.post_save, sender=ProjectType)
def project_type_section_definition_changed(sender, instance, *args, **kwargs):
    if (diff := instance.get_field_diff('report_sections')):
        sections_prev = set(map(lambda s: s.get('id'), diff[0]))
        sections_curr = set(map(lambda s: s.get('id'), diff[1]))
        if sections_prev != sections_curr:
            # Create new sections
            if new_sections := sections_curr - sections_prev:
                sections_to_create = []
                for report in PentestReport.objects.filter(project__project_type=instance).iterator():
                    sections_to_create.extend([ReportSection(report=report, section_id=s) for s in new_sections])
            ReportSection.objects.bulk_create(sections_to_create)

            # Delete removed sections
            if removed_sections := sections_prev - sections_curr:
                ReportSection.objects \
                    .filter(report__project__project_type=instance) \
                    .filter(section_id__in=removed_sections) \
                    .delete()


@receiver(signals.post_delete, sender=UploadedAsset)
@receiver(signals.post_delete, sender=UploadedImage)
def uploaded_asset_deleted(sender, instance, *args, **kwargs):
    # Delete file when instance is deleted from DB
    if instance.file:
        instance.file.delete(save=False)
