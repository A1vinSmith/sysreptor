import random
import string
from django.db.models import signals
from django.dispatch import receiver
from reportcreator_api.pentests.customfields.predefined_fields import FINDING_FIELDS_CORE, REPORT_FIELDS_CORE
from reportcreator_api.pentests.customfields.types import parse_field_definition
from reportcreator_api.pentests.customfields.utils import HandleUndefinedFieldsOptions, ensure_defined_structure, has_field_structure_changed

from reportcreator_api.pentests.models import FindingTemplate, PentestFinding, PentestProject, PentestReport, ProjectType, UploadedAsset, UploadedImage


@receiver(signals.post_save, sender=PentestProject)
def project_project_type_changed(sender, instance, *args, **kwargs):
    """
    When the project_type of a project changed, update the structure of all fields
    """
    if 'project_type' in instance.changed_fields:
        instance.report.update_fields(ensure_defined_structure(value=instance.report.fields, definition=instance.project_type.report_fields_obj, handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        instance.report.save()

        updated_findings = list(instance.report.pentestfindings.all().select_related('report__project__project_type'))
        for finding in updated_findings:
            finding.update_fields(ensure_defined_structure(value=instance.fields, definition=instance.project_type.finding_fields_obj, handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        PentestFinding.objects.bulk_update(updated_findings, fields=['custom_fields'] + list(FINDING_FIELDS_CORE.keys()))


@receiver(signals.post_save, sender=ProjectType)
def project_type_field_definition_changed(sender, instance, *args, **kwargs):
    """
    When report_fields or finding_fields structure changed, update the field structure of all projects that are based on this project_type
    """

    if (diff := instance.get_field_diff('report_fields')) and has_field_structure_changed(parse_field_definition(diff[0]), instance.report_fields_obj):
        # Update structure of all reports using that project_type
        updated_reports = list(PentestReport.objects.filter(project__project_type=instance).select_related('project__project_type'))
        for report in updated_reports:
            report.update_fields(ensure_defined_structure(value=report.fields, definition=instance.report_fields_obj, handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        PentestReport.objects.bulk_update(updated_reports, fields=['custom_fields'] + list(REPORT_FIELDS_CORE.keys()))

    if (diff := instance.get_field_diff('finding_fields')) and has_field_structure_changed(parse_field_definition(diff[0]), instance.finding_fields_obj):
        # Update structure of all findings of this project_type
        updated_findings = list(PentestFinding.objects.filter(report__project__project_type=instance).select_related('report__project__project_type'))
        for finding in updated_findings:
            finding.update_fields(ensure_defined_structure(value=finding.fields, definition=instance.finding_fields_obj, handle_undefined=HandleUndefinedFieldsOptions.FILL_DEFAULT))
        PentestFinding.objects.bulk_update(updated_findings, fields=['custom_fields'] + list(FINDING_FIELDS_CORE.keys()))


@receiver(signals.post_delete, sender=UploadedAsset)
@receiver(signals.post_delete, sender=UploadedImage)
def uploaded_asset_deleted(sender, instance, *args, **kwargs):
    # Delete file when instance is deleted from DB
    if instance.file:
        instance.file.delete(save=False)
